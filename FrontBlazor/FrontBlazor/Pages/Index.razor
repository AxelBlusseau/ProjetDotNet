@page "/"
@using FrontBlazor.Data

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h1>Dernières excuses</h1>
        </div>
        <div class="col text-right">
            <div class="btn-group" role="group">
                <button type="button" @onclick="GetTopTen" class="btn btn-light">Top 10</button>
                <button type="button" @onclick="GetTopHitByYear" class="btn btn-light">Top de cette année</button>
                <button type="button" @onclick="GetTopHitByMonth" class="btn btn-light">Top de ce mois</button>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        @if (excuseList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var forecast in excuseList)
            {
                <div class="col-sm">
                    <div class="card" style="width: 18rem; margin-bottom:2%">
                        @if (forecast.Image != null)
                        {
                            <img src="data:image/bmp;base64, @forecast.Image" class="card-img-top" width="100" height="250" alt="...">
                        }
                        else
                        {
                            <img src="https://i.pinimg.com/originals/20/e9/cb/20e9cb9c757f7021efd945cc7c8d680a.jpg" width="100" height="250" class="card-img-top" alt="...">
                        }

                    <div class="card-body">
                        @if (forecast.Reason.Length > 25)
                        {
                            <p class="card-text">@Convert.ToString(@forecast.Reason).Substring(0, 25)...</p>
                        }
                        else
                        {
                            <p class="card-text">@forecast.Reason</p>
                        }
                        <div class="text-right">
                            <footer class="blockquote-footer">@Convert.ToDateTime(@forecast.Date).ToString("dd/MM/yyyy")</footer>
                        </div>
                    </div>
                        <div class="card-footer">
                            <span style="color:cornflowerblue;">
                                <i class="fab fa-readme" @onclick="(() => feedModal(forecast.Reason))" data-toggle="modal" data-target="#description"></i>
                            </span>
                            @if (voteList.Exists(v => (v.idExcuse == forecast.Id && v.idUser == 1)) || forecast.Voted) //A CHANGER
                            {
                                <span style="color:limegreen;">
                                    <i class="fas fa-heart"></i>
                                </span>
                            }
                            else
                            {
                                <span style="color:orangered;">
                                    <i @onclick="(() => addVote(forecast))" class="fas fa-heart"></i>
                                </span>
                            }
                            <span>@forecast.NbVote</span>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Modal -->
    <div class="modal fade" id="description" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Raison</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @description
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public Excuse excuse { get; set; }
    public Vote vote { get; set; }
    public List<Excuse> excuseList { get; set; }
    public List<Vote> voteList { get; set; }
    public String description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ExcuseService _excuseService = new ExcuseService();
        VoteService _voteService = new VoteService();
        voteList = await Task.Run(() => _voteService.GetVotes());
        excuseList = await Task.Run(() => _excuseService.GetExcuses());
    }

    public void feedModal(String reason) {
        description = reason;
    }

    public async void GetTopTen()
    {
        ExcuseService _excuseService = new ExcuseService();
        excuseList = await Task.Run(() => _excuseService.GetTopTen());
    }

    public async void GetTopHitByMonth()
    {
        ExcuseService _excuseService = new ExcuseService();
        excuseList = await Task.Run(() => _excuseService.GetTopHitByMonth());
    }

    public async void GetTopHitByYear()
    {
        ExcuseService _excuseService = new ExcuseService();
        excuseList = await Task.Run(() => _excuseService.GetTopHitByYear());
    }

    public void addVote(Excuse excuse)
    {
        VoteService _voteService = new VoteService();
        Vote newVote = new Vote();
        newVote.idExcuse = excuse.Id;
        newVote.idUser = 1;
        _voteService.AddVote(newVote);

        //+1 au nombre de vote actuel
        excuseList.First(e => e.Id == excuse.Id).NbVote++;

        //On change la couleur du coeur
        excuseList.First(e => e.Id == excuse.Id).Voted = true;

    }
}
